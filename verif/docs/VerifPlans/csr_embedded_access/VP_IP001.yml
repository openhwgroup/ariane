!Feature
next_elt_id: 3
name: CVA6 CSRs read after write
id: 1
display_order: 1
subfeatures: !!omap
- 000_Read after write RW registers: !Subfeature
    name: 000_Read after write RW registers
    tag: VP_csr-embedded-access_F001_S000
    next_elt_id: 2
    display_order: 0
    items: !!omap
    - '000': !VerifItem
        name: '000'
        tag: VP_csr-embedded-access_F001_S000_I000
        description: 'Check the correctness of RISCV CVA6 Read-Write CSRs by writing
          values: Inverted reset value, 0xaaaaaaaa, 0x555555, random value. Then read
          back the CSR. All registres fields should be stimulated including the reserved
          bits.'
        reqt_doc: 
          https://docs.openhwgroup.org/projects/cva6-user-manual/01_cva6_user/CV32A6_Control_Status_Registers.html
        ref_mode: page
        ref_page: ''
        ref_section: ''
        ref_viewer: firefox
        verif_goals: "1.Verify that CSR can be written using the appropriate CSR write
          instructions.\n2.Ensure correct read operations using CSR read instructions.\n
          3.Ensure that read values of the CSR should be as per CVA6 user manual."
        pfc: 3
        test_type: 2
        cov_method: 1
        cores: 56
        coverage_loc: ''
        comments: 'Related RW Registers: mstatus, misa, mie, mtvec, mstatush, mhpmevent[3-31],
          mscratch, mepc, mcause, mtval, mip, pmpcfg[0-15], icache, mcycle, minstret,
          mcycleh, minstreth, mhpmcounter[3..31], mhpmcounterh[3..31]'
    - '001': !VerifItem
        name: '001'
        tag: VP_csr-embedded-access_F001_S000_I001
        description: Check the correctness of RISCV CVA6 Read-Write CSRs by writing
          illegal values then read back the CSR.
        reqt_doc: 
          https://docs.openhwgroup.org/projects/cva6-user-manual/01_cva6_user/CV32A6_Control_Status_Registers.html
        ref_mode: page
        ref_page: ''
        ref_section: ''
        ref_viewer: firefox
        verif_goals: "1.Verify that CSR can be written with it illegal values.\n2.Ensure
          correct read operations using CSR read instructions.\n3.Ensure that read
          values of the CSR should be unchanged."
        pfc: 3
        test_type: 2
        cov_method: 1
        cores: 56
        coverage_loc: ''
        comments: "Related RW Registers with legal values: \nmstatus.SD : 0\nmstatus.XS
          : 0\nmstatus.FS : 0\nmstatus.VS : 0\nmstatus.UBE : 0\nmisa[31:30] : 1\n
          misa[25:0] : 0x141104\nmie.UEIE : 0\nmie.UTIE : 0\nmie.USIE : 0\nmtvec.MODE:
          0, 1\nmstatush.SBE: 0\nmstatush.MBE: 0\nmip.UEIP:0\nmip.UTIP:0\nmip.USIP:0"
- 001_Read after write RO registers: !Subfeature
    name: 001_Read after write RO registers
    tag: VP_csr-embedded-access_F001_S001
    next_elt_id: 1
    display_order: 1
    items: !!omap
    - '000': !VerifItem
        name: '000'
        tag: VP_csr-embedded-access_F001_S001_I000
        description: 'Check the correctness of RISCV CVA6 Read-Only CSR by writing
          values: Inverted reset, 0xaaaaaaaa, 0x555555, random value. Then confirm
          that write into RO CSRs generates illegal exception. Finaly read back the
          CSR.'
        reqt_doc: 
          https://docs.openhwgroup.org/projects/cva6-user-manual/01_cva6_user/CV32A6_Control_Status_Registers.html
        ref_mode: page
        ref_page: ''
        ref_section: ''
        ref_viewer: firefox
        verif_goals: "1.Attempt to write a RO CSR.\n2.Check to see that an illegal
          instruction exception occurred.\n3.Immediately after returning from the
          exception handler, read CSR to check that it value has not changed."
        pfc: 3
        test_type: 2
        cov_method: 1
        cores: 56
        coverage_loc: ''
        comments: 'Related RO registers: cycle, instret, cycleh, instreth, mvendorid,
          marchid, mimpid, mhartid'
- 002_Write and Read unmapped registers: !Subfeature
    name: 002_Write and Read unmapped registers
    tag: VP_csr-embedded-access_F001_S002
    next_elt_id: 1
    display_order: 2
    items: !!omap
    - '000': !VerifItem
        name: '000'
        tag: VP_csr-embedded-access_F001_S002_I000
        description: Check the correctness of RISCV CVA6 unmapped CSR register addresses
          by writing random value. Then confirm that write into unmapped CSRs addresses
          generates illegal exception. Finaly read back the CSR.
        reqt_doc: 
          https://docs.openhwgroup.org/projects/cva6-user-manual/01_cva6_user/CV32A6_Control_Status_Registers.html
        ref_mode: page
        ref_page: ''
        ref_section: ''
        ref_viewer: firefox
        verif_goals: "1.Attempt to write a unoccupied CSR address.\n2.Check to see
          that an illegal instruction exception occurred.\n3.Immediately after returning
          from the exception handler, read address to check that it value is 0."
        pfc: 3
        test_type: 2
        cov_method: 0
        cores: 56
        coverage_loc: ''
        comments: 'Related register addresses: all unoccupied addresses from 0x0 to
          0xFFF'
vptool_gitrev: '$Id: b0efb3ae3f9057b71a577d43c2b77f1cfb2ef82f $'
io_fmt_gitrev: '$Id: 7ee5d68801f5498a957bcbe23fcad87817a364c5 $'
config_gitrev: '$Id: 0422e19126dae20ffc4d5a84e4ce3de0b6eb4eb5 $'
ymlcfg_gitrev: '$Id: 286c689bd48b7a58f9a37754267895cffef1270c $'
