# Copyright 2022 Thales DIS design services SAS
#
# Licensed under the Solderpad Hardware Licence, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# SPDX-License-Identifier: Apache-2.0 WITH SHL-2.0
# You may obtain a copy of the License at https://solderpad.org/licenses/
#
# Original Author: Yannick Casamatta (yannick.casamatta@thalesgroup.com)

# Project maintainers must define following variables to adapt this CI to their runtime environment (Settings > CI/CD > Variables)
# - RUN_CORE_CI: 'true'/'false'
# - RUN_CORE_V_VERIF_CI: 'true'/'false'
# - CORE_V_VERIF_REPO: https://github.com/openhwgroup/core-v-verif
# - CORE_V_VERIF_BRANCH: master
# - RUN_EXTERNAL_CI: 'true'/'false'
# - EXTERNAL_CI_PROJECT_PATH: custom-group/custom-repo
# - EXTERNAL_CI_PROJECT_BRANCH: dev/mybranch
# - EXTERNAL_CI_YML_PATH: .gitlab-ci/my_custom_ci.yml
# - TAGS_RUNNER: arch,shell  #no space!
# Others users can manually trigger pipelines with overridden variables (CI/CD > Pipeline > Run Pipeline)

# Guidelines:

# - Prefer the use of parent-child pipelines instead of including yml for ease of maintenance.
# - Specific elements should be defined in the triggered yml to avoid conflicts between pipelines.
# - In this file, only generic job/variables should be declared.


variables:
  # Issue gitlab-ci: variables defined here can't be overriden when pipeline is triggered manually or by schedule 


stages:
   - build
   - test


check_env:
  variables:
    GIT_STRATEGY: none
  tags: [$TAGS_RUNNER]
  before_script:
  after_script:
  stage: build
  script:
    - echo $RUN_CORE_CI
    - echo $RUN_CORE_V_VERIF_CI
    - echo $CORE_V_VERIF_REPO
    - echo $CORE_V_VERIF_BRANCH
    - echo $RUN_EXTERNAL_CI
    - echo $EXTERNAL_CI_PROJECT_PATH
    - echo $EXTERNAL_CI_PROJECT_BRANCH
    - echo $EXTERNAL_CI_YML_PATH

# core testbench downstream pipeline 
# If enabled by RUN_CORE_CI, additionnal variables may be necessary and should be declared by project maintainers.
# Please read .gitlab-ci/cva6.yml
cva6:
  trigger:
    include: .gitlab-ci/cva6.yml
  rules:
    - if: $RUN_CORE_CI == "true"
      when: always
    - when: never

# core-v-verif testbench downstream pipeline 
# If enabled by RUN_CORE_V_VERIF_CI, additionnal variables may be necessary and should be declared by project maintainers.
# Please read .gitlab-ci/cva6.yml in core-v-verif repository
# core-v-verif Build job (see next core-v-verif-run job)
core-v-verif-build:
  variables:
    GIT_STRATEGY: none
  tags: [$TAGS_RUNNER]
  stage: build
  script:
    - '[[ -e ./core-v-verif ]] && rm -rf core-v-verif'
    - git clone $CORE_V_VERIF_REPO -b $CORE_V_VERIF_BRANCH --depth 1 core-v-verif 
    - echo "before_script:" >> core-v-verif/.gitlab-ci/cva6.yml
    - echo "  - '[[ -e ./core-v-verif ]] && rm -rf core-v-verif'" >> core-v-verif/.gitlab-ci/cva6.yml
    - echo "  - git clone $CORE_V_VERIF_REPO -b $CORE_V_VERIF_BRANCH --depth 1 core-v-verif" >> core-v-verif/.gitlab-ci/cva6.yml
    - echo "  - ln -rs ./ core-v-verif/core-v-cores/cva6" >> core-v-verif/.gitlab-ci/cva6.yml
    - echo "  - '[[ -e ./artifacts ]] && mv ./artifacts ./core-v-verif/artifacts'" >> core-v-verif/.gitlab-ci/cva6.yml
    - echo "  - cd core-v-verif" >> core-v-verif/.gitlab-ci/cva6.yml
    - echo "after_script:" >> core-v-verif/.gitlab-ci/cva6.yml
    - echo "  - '[[ -e ./core-v-verif/artifacts ]] && mv ./core-v-verif/artifacts ./artifacts'" >> core-v-verif/.gitlab-ci/cva6.yml
  rules:
    - if: '$RUN_CORE_V_VERIF_CI == "true"'
      when: always
    - when: never
  artifacts:
      paths:
        - core-v-verif/.gitlab-ci/cva6.yml


# core-v-verif trigger job (see previous core-v-verif-build job)
core-v-verif-run:
  trigger:
    include: 
      - artifact: core-v-verif/.gitlab-ci/cva6.yml
        job: core-v-verif-build
  rules:
    - if: '$RUN_CORE_V_VERIF_CI == "true"'
      when: always
    - when: never




# Use this entry point to run a pipeline from another repository (hosted on the same gitlab server)
# If enabled by RUN_EXTERNAL_CI, additionnal variables may be necessary and should be declared by project maintainers.
external:
  trigger:
    include:
      - project: $EXTERNAL_CI_PROJECT_PATH
        ref: $EXTERNAL_CI_PROJECT_BRANCH
        file: $EXTERNAL_CI_YML_PATH
  rules:
    - if: '$RUN_EXTERNAL_CI == "true"'
      when: always
    - when: never

